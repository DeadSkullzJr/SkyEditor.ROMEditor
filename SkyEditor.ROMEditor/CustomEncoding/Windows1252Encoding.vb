Imports System
Imports System.Collections.Generic
Imports System.Text

Namespace CustomEncoding
    ''' <summary>
    ''' A custom encoding class that provides encoding capabilities for the
    ''' 'Western European (Windows)' encoding under Silverlight.<br/>
    ''' This class was generated by a tool. For more information, visit
    ''' http://www.hardcodet.net/2010/03/silverlight-text-encoding-class-generator
    ''' </summary>
    Public Class Windows1252Encoding
        Inherits Encoding

        Public Overrides ReadOnly Property WebName As String
            Get
                Return "Windows-1252"
            End Get
        End Property

        Private _fallbackCharacter As Char?

        Public Property FallbackCharacter As Char?
            Get
                Return FallbackCharacter
            End Get
            Set(ByVal value As Char?)
                _fallbackCharacter = value

                If value.HasValue AndAlso Not charToByte.ContainsKey(value.Value) Then
                    Dim msg As String = "Cannot use the character [{0}] (int value {1}) as fallback value " & "- the fallback character itself is not supported by the encoding."
                    msg = String.Format(msg, value.Value, AscW(value.Value))
                    Throw New EncoderFallbackException(msg)
                End If

                FallbackByte = If(value.HasValue, charToByte(value.Value), CType(Nothing, Byte?))
            End Set
        End Property

        Public Property FallbackByte As Byte?

        Public Sub New()
            _fallbackCharacter = "?"c
        End Sub

        Public Overrides Function GetBytes(ByVal chars As Char(), ByVal charIndex As Integer, ByVal charCount As Integer, ByVal bytes As Byte(), ByVal byteIndex As Integer) As Integer
            Return If(FallbackByte.HasValue, GetBytesWithFallBack(chars, charIndex, charCount, bytes, byteIndex), GetBytesWithoutFallback(chars, charIndex, charCount, bytes, byteIndex))
        End Function

        Private Function GetBytesWithFallBack(ByVal chars As Char(), ByVal charIndex As Integer, ByVal charCount As Integer, ByVal bytes As Byte(), ByVal byteIndex As Integer) As Integer
            For i As Integer = 0 To charCount - 1
                Dim character = chars(i + charIndex)
                Dim byteValue As Byte
                Dim status As Boolean = charToByte.TryGetValue(character, byteValue)
                bytes(byteIndex + i) = If(status, byteValue, FallbackByte.Value)
            Next

            Return charCount
        End Function

        Private Function GetBytesWithoutFallback(ByVal chars As Char(), ByVal charIndex As Integer, ByVal charCount As Integer, ByVal bytes As Byte(), ByVal byteIndex As Integer) As Integer
            For i As Integer = 0 To charCount - 1
                Dim character = chars(i + charIndex)
                Dim byteValue As Byte
                Dim status As Boolean = charToByte.TryGetValue(character, byteValue)

                If Not status Then
                    Dim msg As String = "The encoding [{0}] cannot encode the character [{1}] (int value {2}). Set the FallbackCharacter property in order to suppress this exception and encode a default character instead."
                    msg = String.Format(msg, WebName, character, AscW(character))
                    Throw New EncoderFallbackException(msg)
                End If

                bytes(byteIndex + i) = byteValue
            Next

            Return charCount
        End Function

        Public Overrides Function GetChars(ByVal bytes As Byte(), ByVal byteIndex As Integer, ByVal byteCount As Integer, ByVal chars As Char(), ByVal charIndex As Integer) As Integer
            Return If(_fallbackCharacter.HasValue, GetCharsWithFallback(bytes, byteIndex, byteCount, chars, charIndex), GetCharsWithoutFallback(bytes, byteIndex, byteCount, chars, charIndex))
        End Function

        Private Function GetCharsWithFallback(ByVal bytes As Byte(), ByVal byteIndex As Integer, ByVal byteCount As Integer, ByVal chars As Char(), ByVal charIndex As Integer) As Integer
            For i As Integer = 0 To byteCount - 1
                Dim lookupIndex As Byte = bytes(i + byteIndex)
                Dim result As Char = If(lookupIndex >= byteToChar.Length, _fallbackCharacter.Value, byteToChar(lookupIndex))
                chars(charIndex + i) = result
            Next

            Return byteCount
        End Function

        Private Function GetCharsWithoutFallback(ByVal bytes As Byte(), ByVal byteIndex As Integer, ByVal byteCount As Integer, ByVal chars As Char(), ByVal charIndex As Integer) As Integer
            For i As Integer = 0 To byteCount - 1
                Dim lookupIndex As Byte = bytes(i + byteIndex)

                If lookupIndex >= byteToChar.Length Then
                    Dim msg As String = "The encoding [{0}] cannot decode byte value [{1}]. Set the FallbackCharacter property in order to suppress this exception and decode the value as a default character instead."
                    msg = String.Format(msg, WebName, lookupIndex)
                    Throw New EncoderFallbackException(msg)
                End If

                chars(charIndex + i) = byteToChar(lookupIndex)
            Next

            Return byteCount
        End Function

        Public Overrides Function GetByteCount(ByVal chars As Char(), ByVal index As Integer, ByVal count As Integer) As Integer
            Return count
        End Function

        Public Overrides Function GetCharCount(ByVal bytes As Byte(), ByVal index As Integer, ByVal count As Integer) As Integer
            Return count
        End Function

        Public Overrides Function GetMaxByteCount(ByVal charCount As Integer) As Integer
            Return charCount
        End Function

        Public Overrides Function GetMaxCharCount(ByVal byteCount As Integer) As Integer
            Return byteCount
        End Function

        Public Shared ReadOnly Property CharacterCount As Integer
            Get
                Return byteToChar.Length
            End Get
        End Property

        Private Shared byteToChar As Char() = New Char() {ChrW(0), ChrW(1), ChrW(2), ChrW(3), ChrW(4), ChrW(5), ChrW(6), ChrW(7), ChrW(8), ChrW(9), ChrW(10), ChrW(11), ChrW(12), ChrW(13), ChrW(14), ChrW(15), ChrW(16), ChrW(17), ChrW(18), ChrW(19), ChrW(20), ChrW(21), ChrW(22), ChrW(23), ChrW(24), ChrW(25), ChrW(26), ChrW(27), ChrW(28), ChrW(29), ChrW(30), ChrW(31), ChrW(32), ChrW(33), ChrW(34), ChrW(35), ChrW(36), ChrW(37), ChrW(38), ChrW(39), ChrW(40), ChrW(41), ChrW(42), ChrW(43), ChrW(44), ChrW(45), ChrW(46), ChrW(47), ChrW(48), ChrW(49), ChrW(50), ChrW(51), ChrW(52), ChrW(53), ChrW(54), ChrW(55), ChrW(56), ChrW(57), ChrW(58), ChrW(59), ChrW(60), ChrW(61), ChrW(62), ChrW(63), ChrW(64), ChrW(65), ChrW(66), ChrW(67), ChrW(68), ChrW(69), ChrW(70), ChrW(71), ChrW(72), ChrW(73), ChrW(74), ChrW(75), ChrW(76), ChrW(77), ChrW(78), ChrW(79), ChrW(80), ChrW(81), ChrW(82), ChrW(83), ChrW(84), ChrW(85), ChrW(86), ChrW(87), ChrW(88), ChrW(89), ChrW(90), ChrW(91), ChrW(92), ChrW(93), ChrW(94), ChrW(95), ChrW(96), ChrW(97), ChrW(98), ChrW(99), ChrW(100), ChrW(101), ChrW(102), ChrW(103), ChrW(104), ChrW(105), ChrW(106), ChrW(107), ChrW(108), ChrW(109), ChrW(110), ChrW(111), ChrW(112), ChrW(113), ChrW(114), ChrW(115), ChrW(116), ChrW(117), ChrW(118), ChrW(119), ChrW(120), ChrW(121), ChrW(122), ChrW(123), ChrW(124), ChrW(125), ChrW(126), ChrW(127), ChrW(8364), ChrW(129), ChrW(8218), ChrW(402), ChrW(8222), ChrW(8230), ChrW(8224), ChrW(8225), ChrW(710), ChrW(8240), ChrW(352), ChrW(8249), ChrW(338), ChrW(141), ChrW(381), ChrW(143), ChrW(144), ChrW(8216), ChrW(8217), ChrW(8220), ChrW(8221), ChrW(8226), ChrW(8211), ChrW(8212), ChrW(732), ChrW(8482), ChrW(353), ChrW(8250), ChrW(339), ChrW(157), ChrW(382), ChrW(376), ChrW(160), ChrW(161), ChrW(162), ChrW(163), ChrW(164), ChrW(165), ChrW(166), ChrW(167), ChrW(168), ChrW(169), ChrW(170), ChrW(171), ChrW(172), ChrW(173), ChrW(174), ChrW(175), ChrW(176), ChrW(177), ChrW(178), ChrW(179), ChrW(180), ChrW(181), ChrW(182), ChrW(183), ChrW(184), ChrW(185), ChrW(186), ChrW(187), ChrW(188), ChrW(189), ChrW(190), ChrW(191), ChrW(192), ChrW(193), ChrW(194), ChrW(195), ChrW(196), ChrW(197), ChrW(198), ChrW(199), ChrW(200), ChrW(201), ChrW(202), ChrW(203), ChrW(204), ChrW(205), ChrW(206), ChrW(207), ChrW(208), ChrW(209), ChrW(210), ChrW(211), ChrW(212), ChrW(213), ChrW(214), ChrW(215), ChrW(216), ChrW(217), ChrW(218), ChrW(219), ChrW(220), ChrW(221), ChrW(222), ChrW(223), ChrW(224), ChrW(225), ChrW(226), ChrW(227), ChrW(228), ChrW(229), ChrW(230), ChrW(231), ChrW(232), ChrW(233), ChrW(234), ChrW(235), ChrW(236), ChrW(237), ChrW(238), ChrW(239), ChrW(240), ChrW(241), ChrW(242), ChrW(243), ChrW(244), ChrW(245), ChrW(246), ChrW(247), ChrW(248), ChrW(249), ChrW(250), ChrW(251), ChrW(252), ChrW(253), ChrW(254), ChrW(255)}
        Private Shared charToByte As Dictionary(Of Char, Byte) = New Dictionary(Of Char, Byte) From {
            {ChrW(0), 0},
            {ChrW(1), 1},
            {ChrW(2), 2},
            {ChrW(3), 3},
            {ChrW(4), 4},
            {ChrW(5), 5},
            {ChrW(6), 6},
            {ChrW(7), 7},
            {ChrW(8), 8},
            {ChrW(9), 9},
            {ChrW(10), 10},
            {ChrW(11), 11},
            {ChrW(12), 12},
            {ChrW(13), 13},
            {ChrW(14), 14},
            {ChrW(15), 15},
            {ChrW(16), 16},
            {ChrW(17), 17},
            {ChrW(18), 18},
            {ChrW(19), 19},
            {ChrW(20), 20},
            {ChrW(21), 21},
            {ChrW(22), 22},
            {ChrW(23), 23},
            {ChrW(24), 24},
            {ChrW(25), 25},
            {ChrW(26), 26},
            {ChrW(27), 27},
            {ChrW(28), 28},
            {ChrW(29), 29},
            {ChrW(30), 30},
            {ChrW(31), 31},
            {ChrW(32), 32},
            {ChrW(33), 33},
            {ChrW(34), 34},
            {ChrW(35), 35},
            {ChrW(36), 36},
            {ChrW(37), 37},
            {ChrW(38), 38},
            {ChrW(39), 39},
            {ChrW(40), 40},
            {ChrW(41), 41},
            {ChrW(42), 42},
            {ChrW(43), 43},
            {ChrW(44), 44},
            {ChrW(45), 45},
            {ChrW(46), 46},
            {ChrW(47), 47},
            {ChrW(48), 48},
            {ChrW(49), 49},
            {ChrW(50), 50},
            {ChrW(51), 51},
            {ChrW(52), 52},
            {ChrW(53), 53},
            {ChrW(54), 54},
            {ChrW(55), 55},
            {ChrW(56), 56},
            {ChrW(57), 57},
            {ChrW(58), 58},
            {ChrW(59), 59},
            {ChrW(60), 60},
            {ChrW(61), 61},
            {ChrW(62), 62},
            {ChrW(63), 63},
            {ChrW(64), 64},
            {ChrW(65), 65},
            {ChrW(66), 66},
            {ChrW(67), 67},
            {ChrW(68), 68},
            {ChrW(69), 69},
            {ChrW(70), 70},
            {ChrW(71), 71},
            {ChrW(72), 72},
            {ChrW(73), 73},
            {ChrW(74), 74},
            {ChrW(75), 75},
            {ChrW(76), 76},
            {ChrW(77), 77},
            {ChrW(78), 78},
            {ChrW(79), 79},
            {ChrW(80), 80},
            {ChrW(81), 81},
            {ChrW(82), 82},
            {ChrW(83), 83},
            {ChrW(84), 84},
            {ChrW(85), 85},
            {ChrW(86), 86},
            {ChrW(87), 87},
            {ChrW(88), 88},
            {ChrW(89), 89},
            {ChrW(90), 90},
            {ChrW(91), 91},
            {ChrW(92), 92},
            {ChrW(93), 93},
            {ChrW(94), 94},
            {ChrW(95), 95},
            {ChrW(96), 96},
            {ChrW(97), 97},
            {ChrW(98), 98},
            {ChrW(99), 99},
            {ChrW(100), 100},
            {ChrW(101), 101},
            {ChrW(102), 102},
            {ChrW(103), 103},
            {ChrW(104), 104},
            {ChrW(105), 105},
            {ChrW(106), 106},
            {ChrW(107), 107},
            {ChrW(108), 108},
            {ChrW(109), 109},
            {ChrW(110), 110},
            {ChrW(111), 111},
            {ChrW(112), 112},
            {ChrW(113), 113},
            {ChrW(114), 114},
            {ChrW(115), 115},
            {ChrW(116), 116},
            {ChrW(117), 117},
            {ChrW(118), 118},
            {ChrW(119), 119},
            {ChrW(120), 120},
            {ChrW(121), 121},
            {ChrW(122), 122},
            {ChrW(123), 123},
            {ChrW(124), 124},
            {ChrW(125), 125},
            {ChrW(126), 126},
            {ChrW(127), 127},
            {ChrW(8364), 128},
            {ChrW(129), 129},
            {ChrW(8218), 130},
            {ChrW(402), 131},
            {ChrW(8222), 132},
            {ChrW(8230), 133},
            {ChrW(8224), 134},
            {ChrW(8225), 135},
            {ChrW(710), 136},
            {ChrW(8240), 137},
            {ChrW(352), 138},
            {ChrW(8249), 139},
            {ChrW(338), 140},
            {ChrW(141), 141},
            {ChrW(381), 142},
            {ChrW(143), 143},
            {ChrW(144), 144},
            {ChrW(8216), 145},
            {ChrW(8217), 146},
            {ChrW(8220), 147},
            {ChrW(8221), 148},
            {ChrW(8226), 149},
            {ChrW(8211), 150},
            {ChrW(8212), 151},
            {ChrW(732), 152},
            {ChrW(8482), 153},
            {ChrW(353), 154},
            {ChrW(8250), 155},
            {ChrW(339), 156},
            {ChrW(157), 157},
            {ChrW(382), 158},
            {ChrW(376), 159},
            {ChrW(160), 160},
            {ChrW(161), 161},
            {ChrW(162), 162},
            {ChrW(163), 163},
            {ChrW(164), 164},
            {ChrW(165), 165},
            {ChrW(166), 166},
            {ChrW(167), 167},
            {ChrW(168), 168},
            {ChrW(169), 169},
            {ChrW(170), 170},
            {ChrW(171), 171},
            {ChrW(172), 172},
            {ChrW(173), 173},
            {ChrW(174), 174},
            {ChrW(175), 175},
            {ChrW(176), 176},
            {ChrW(177), 177},
            {ChrW(178), 178},
            {ChrW(179), 179},
            {ChrW(180), 180},
            {ChrW(181), 181},
            {ChrW(182), 182},
            {ChrW(183), 183},
            {ChrW(184), 184},
            {ChrW(185), 185},
            {ChrW(186), 186},
            {ChrW(187), 187},
            {ChrW(188), 188},
            {ChrW(189), 189},
            {ChrW(190), 190},
            {ChrW(191), 191},
            {ChrW(192), 192},
            {ChrW(193), 193},
            {ChrW(194), 194},
            {ChrW(195), 195},
            {ChrW(196), 196},
            {ChrW(197), 197},
            {ChrW(198), 198},
            {ChrW(199), 199},
            {ChrW(200), 200},
            {ChrW(201), 201},
            {ChrW(202), 202},
            {ChrW(203), 203},
            {ChrW(204), 204},
            {ChrW(205), 205},
            {ChrW(206), 206},
            {ChrW(207), 207},
            {ChrW(208), 208},
            {ChrW(209), 209},
            {ChrW(210), 210},
            {ChrW(211), 211},
            {ChrW(212), 212},
            {ChrW(213), 213},
            {ChrW(214), 214},
            {ChrW(215), 215},
            {ChrW(216), 216},
            {ChrW(217), 217},
            {ChrW(218), 218},
            {ChrW(219), 219},
            {ChrW(220), 220},
            {ChrW(221), 221},
            {ChrW(222), 222},
            {ChrW(223), 223},
            {ChrW(224), 224},
            {ChrW(225), 225},
            {ChrW(226), 226},
            {ChrW(227), 227},
            {ChrW(228), 228},
            {ChrW(229), 229},
            {ChrW(230), 230},
            {ChrW(231), 231},
            {ChrW(232), 232},
            {ChrW(233), 233},
            {ChrW(234), 234},
            {ChrW(235), 235},
            {ChrW(236), 236},
            {ChrW(237), 237},
            {ChrW(238), 238},
            {ChrW(239), 239},
            {ChrW(240), 240},
            {ChrW(241), 241},
            {ChrW(242), 242},
            {ChrW(243), 243},
            {ChrW(244), 244},
            {ChrW(245), 245},
            {ChrW(246), 246},
            {ChrW(247), 247},
            {ChrW(248), 248},
            {ChrW(249), 249},
            {ChrW(250), 250},
            {ChrW(251), 251},
            {ChrW(252), 252},
            {ChrW(253), 253},
            {ChrW(254), 254},
            {ChrW(255), 255}
        }
    End Class
End Namespace
